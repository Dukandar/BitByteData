{"Enums/SignedNumberRepresentation.html#/s:11BitByteData26SignedNumberRepresentationO13signMagnitudeyA2CmF":{"name":"signMagnitude","abstract":"<p>Signed magnitude representation.</p>","parent_name":"SignedNumberRepresentation"},"Enums/SignedNumberRepresentation.html#/s:11BitByteData26SignedNumberRepresentationO22oneComplementNegativesyA2CmF":{"name":"oneComplementNegatives","abstract":"<p>One&rsquo;s complement representation of negative integers.</p>","parent_name":"SignedNumberRepresentation"},"Enums/SignedNumberRepresentation.html#/s:11BitByteData26SignedNumberRepresentationO22twoComplementNegativesyA2CmF":{"name":"twoComplementNegatives","abstract":"<p>Two&rsquo;s complement representation of negative integers.</p>","parent_name":"SignedNumberRepresentation"},"Enums/SignedNumberRepresentation.html#/s:11BitByteData26SignedNumberRepresentationO6biasedyACSi_tcACmF":{"name":"biased(bias:)","abstract":"<p>Biased representation with a custom <code>bias</code>.</p>","parent_name":"SignedNumberRepresentation"},"Enums/SignedNumberRepresentation.html#/s:11BitByteData26SignedNumberRepresentationO16radixNegativeTwoyA2CmF":{"name":"radixNegativeTwo","abstract":"<p>Base (radix) -2 representation.</p>","parent_name":"SignedNumberRepresentation"},"Enums/SignedNumberRepresentation.html#/s:11BitByteData26SignedNumberRepresentationO016minRepresentableE09bitsCountS2i_tF":{"name":"minRepresentableNumber(bitsCount:)","abstract":"<p>Returns a minimum signed integer that is possible to represent in a binary format within <code>bitsCount</code> bits using the","parent_name":"SignedNumberRepresentation"},"Enums/SignedNumberRepresentation.html#/s:11BitByteData26SignedNumberRepresentationO016maxRepresentableE09bitsCountS2i_tF":{"name":"maxRepresentableNumber(bitsCount:)","abstract":"<p>Returns a maximum signed integer that is possible to represent in a binary format within <code>bitsCount</code> bits using the","parent_name":"SignedNumberRepresentation"},"Enums/SignedNumberRepresentation.html":{"name":"SignedNumberRepresentation","abstract":"<p>Represents a method to encode signed integers in a binary format.</p>"},"Classes/MsbBitWriter.html#/s:11BitByteData03MsbA6WriterC4data10Foundation0C0Vvp":{"name":"data","abstract":"<p>Data which contains the writer&rsquo;s output (the last byte, that is currently being written, is not included).</p>","parent_name":"MsbBitWriter"},"Classes/MsbBitWriter.html#/s:11BitByteData03MsbA6WriterC9isAlignedSbvp":{"name":"isAligned","abstract":"<p>True, if a bit pointer is aligned to a byte boundary.</p>","parent_name":"MsbBitWriter"},"Classes/MsbBitWriter.html#/s:11BitByteData03MsbA6WriterCACycfc":{"name":"init()","abstract":"<p>Creates an instance for writing bits and bytes.</p>","parent_name":"MsbBitWriter"},"Classes/MsbBitWriter.html#/s:11BitByteData03MsbA6WriterC5write3bitys5UInt8V_tF":{"name":"write(bit:)","abstract":"<p>Writes a <code>bit</code>, advancing by one bit position.</p>","parent_name":"MsbBitWriter"},"Classes/MsbBitWriter.html#/s:11BitByteData03MsbA6WriterC5write14unsignedNumber9bitsCountySu_SitF":{"name":"write(unsignedNumber:bitsCount:)","abstract":"<p>Writes an unsigned <code>number</code>, advancing by <code>bitsCount</code> bit positions.</p>","parent_name":"MsbBitWriter"},"Classes/MsbBitWriter.html#/s:11BitByteData03MsbA6WriterC6append4byteys5UInt8V_tF":{"name":"append(byte:)","abstract":"<p>Writes a <code>byte</code>, advancing by one byte position.</p>","parent_name":"MsbBitWriter"},"Classes/MsbBitWriter.html#/s:11BitByteData03MsbA6WriterC5alignyyF":{"name":"align()","abstract":"<p>Aligns a bit pointer to a byte boundary, i.e. moves the bit pointer to the first bit of the next byte, filling all","parent_name":"MsbBitWriter"},"Classes/LsbBitWriter.html#/s:11BitByteData03LsbA6WriterC4data10Foundation0C0Vvp":{"name":"data","abstract":"<p>Data which contains the writer&rsquo;s output (the last byte, that is currently being written, is not included).</p>","parent_name":"LsbBitWriter"},"Classes/LsbBitWriter.html#/s:11BitByteData03LsbA6WriterC9isAlignedSbvp":{"name":"isAligned","abstract":"<p>True, if a bit pointer is aligned to a byte boundary.</p>","parent_name":"LsbBitWriter"},"Classes/LsbBitWriter.html#/s:11BitByteData03LsbA6WriterCACycfc":{"name":"init()","abstract":"<p>Creates an instance for writing bits and bytes.</p>","parent_name":"LsbBitWriter"},"Classes/LsbBitWriter.html#/s:11BitByteData03LsbA6WriterC5write3bitys5UInt8V_tF":{"name":"write(bit:)","abstract":"<p>Writes a <code>bit</code>, advancing by one bit position.</p>","parent_name":"LsbBitWriter"},"Classes/LsbBitWriter.html#/s:11BitByteData03LsbA6WriterC5write14unsignedNumber9bitsCountySu_SitF":{"name":"write(unsignedNumber:bitsCount:)","abstract":"<p>Writes an unsigned <code>number</code>, advancing by <code>bitsCount</code> bit positions.</p>","parent_name":"LsbBitWriter"},"Classes/LsbBitWriter.html#/s:11BitByteData03LsbA6WriterC6append4byteys5UInt8V_tF":{"name":"append(byte:)","abstract":"<p>Writes a <code>byte</code>, advancing by one byte position.</p>","parent_name":"LsbBitWriter"},"Classes/LsbBitWriter.html#/s:11BitByteData03LsbA6WriterC5alignyyF":{"name":"align()","abstract":"<p>Aligns a bit pointer to a byte boundary, i.e. moves the bit pointer to the first bit of the next byte, filling all","parent_name":"LsbBitWriter"},"Protocols/BitWriter.html#/s:11BitByteData0A6WriterP4data10Foundation0C0Vvp":{"name":"data","abstract":"<p>Data which contains the writer&rsquo;s output (the last byte, that is currently being written, is not included).</p>","parent_name":"BitWriter"},"Protocols/BitWriter.html#/s:11BitByteData0A6WriterP9isAlignedSbvp":{"name":"isAligned","abstract":"<p>True, if a bit pointer is aligned to a byte boundary.</p>","parent_name":"BitWriter"},"Protocols/BitWriter.html#/s:11BitByteData0A6WriterPxycfc":{"name":"init()","abstract":"<p>Creates an instance for writing bits and bytes.</p>","parent_name":"BitWriter"},"Protocols/BitWriter.html#/s:11BitByteData0A6WriterP5write3bitys5UInt8V_tF":{"name":"write(bit:)","abstract":"<p>Writes a <code>bit</code>, advancing by one bit position.</p>","parent_name":"BitWriter"},"Protocols/BitWriter.html#/s:11BitByteData0A6WriterP5write4bitsySays5UInt8VG_tF":{"name":"write(bits:)","abstract":"<p>Writes <code>bits</code>, advancing by <code>bits.count</code> bit positions.</p>","parent_name":"BitWriter"},"Protocols/BitWriter.html#/s:11BitByteData0A6WriterP5write6number9bitsCountySi_SitF":{"name":"write(number:bitsCount:)","abstract":"<p>Writes a <code>number</code> into <code>bitsCount</code> amount of bits, advancing by <code>bitsCount</code> bit positions.</p>","parent_name":"BitWriter"},"Protocols/BitWriter.html#/s:11BitByteData0A6WriterP5write12signedNumber9bitsCount14representationySi_SiAA06SignedG14RepresentationOtF":{"name":"write(signedNumber:bitsCount:representation:)","abstract":"<p>Writes a signed integer <code>number</code> into <code>bitsCount</code> amount of bits, advancing by <code>bitsCount</code> bit positions, while","parent_name":"BitWriter"},"Protocols/BitWriter.html#/s:11BitByteData0A6WriterP5write14unsignedNumber9bitsCountySu_SitF":{"name":"write(unsignedNumber:bitsCount:)","abstract":"<p>Writes an unsigned <code>number</code>, advancing by <code>bitsCount</code> bit positions.</p>","parent_name":"BitWriter"},"Protocols/BitWriter.html#/s:11BitByteData0A6WriterP6append4byteys5UInt8V_tF":{"name":"append(byte:)","abstract":"<p>Writes a <code>byte</code>, advancing by one byte position.</p>","parent_name":"BitWriter"},"Protocols/BitWriter.html#/s:11BitByteData0A6WriterP5alignyyF":{"name":"align()","abstract":"<p>Aligns a bit pointer to a byte boundary, i.e. moves the bit pointer to the first bit of the next byte, filling all","parent_name":"BitWriter"},"Protocols/BitWriter.html":{"name":"BitWriter","abstract":"<p>A type that contains functions for writing <code>Data</code> bit-by-bit and byte-by-byte.</p>"},"Classes/LsbBitWriter.html":{"name":"LsbBitWriter","abstract":"<p>A type that contains functions for writing <code>Data</code> bit-by-bit and byte-by-byte using &ldquo;LSB 0&rdquo; bit numbering scheme.</p>"},"Classes/MsbBitWriter.html":{"name":"MsbBitWriter","abstract":"<p>A type that contains functions for writing <code>Data</code> bit-by-bit and byte-by-byte using &ldquo;MSB 0&rdquo; bit numbering scheme.</p>"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC4sizeSivp":{"name":"size","abstract":"<p>Size of the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC4data10Foundation0C0Vvp\">data</a></code> (in bytes).</p>","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC4data10Foundation0C0Vvp":{"name":"data","abstract":"<p>Data which is being read.</p>","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC6offsetSivp":{"name":"offset","abstract":"<p>Offset to a byte in the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC4data10Foundation0C0Vvp\">data</a></code> which will be read next.</p>","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC9isAlignedSbvp":{"name":"isAligned","abstract":"<p>True, if a bit pointer is aligned to a byte boundary.</p>","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC8bitsLeftSivp":{"name":"bitsLeft","abstract":"<p>Amount of bits left to read.</p>","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC8bitsReadSivp":{"name":"bitsRead","abstract":"<p>Amount of bits that were already read.</p>","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC4dataAC10Foundation0C0V_tcfc":{"name":"init(data:)","abstract":"<p>Creates an instance for reading bits (and bytes) from the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC4data10Foundation0C0Vvp\">data</a></code>.</p>","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderCyAcA0bE0_pcfc":{"name":"init(_:)","abstract":"<p>Converts a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/ByteReader.html\">ByteReader</a></code> instance into a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/LsbBitReader.html\">LsbBitReader</a></code>, enabling bit reading capabilities. The current <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC6offsetSivp\">offset</a></code>","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC7advance2byySi_tF":{"name":"advance(by:)","abstract":"<p>Advances a bit pointer by the specified amount of bits (the default value is 1).</p>","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC3bits5UInt8VyF":{"name":"bit()","abstract":"<p>Reads a bit and returns it, advancing by one bit position.</p>","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC4bits5countSays5UInt8VGSi_tF":{"name":"bits(count:)","abstract":"<p>Reads <code>count</code> bits and returns them as a <code>[UInt8]</code> array, advancing by <code>count</code> bit positions.</p>","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC9signedInt8fromBits14representationS2i_AA26SignedNumberRepresentationOtF":{"name":"signedInt(fromBits:representation:)","abstract":"<p>Reads <code>fromBits</code> bits, treating them as a binary <code>represenation</code> of a signed integer, and returns the result as a","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC4byte8fromBitss5UInt8VSi_tF":{"name":"byte(fromBits:)","abstract":"<p>Reads <code>fromBits</code> bits and returns them as a <code>UInt8</code> number, advancing by <code>fromBits</code> bit positions.</p>","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC6uint168fromBitss6UInt16VSi_tF":{"name":"uint16(fromBits:)","abstract":"<p>Reads <code>fromBits</code> bits and returns them as a <code>UInt16</code> number, advancing by <code>fromBits</code> bit positions.</p>","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC6uint328fromBitss6UInt32VSi_tF":{"name":"uint32(fromBits:)","abstract":"<p>Reads <code>fromBits</code> bits and returns them as a <code>UInt32</code> number, advancing by <code>fromBits</code> bit positions.</p>","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC6uint648fromBitss6UInt64VSi_tF":{"name":"uint64(fromBits:)","abstract":"<p>Reads <code>fromBits</code> bits and returns them as a <code>UInt64</code> number, advancing by <code>fromBits</code> bit positions.</p>","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC5alignyyF":{"name":"align()","abstract":"<p>Aligns a bit pointer to a byte boundary, i.e. moves the bit pointer to the first bit of the next byte. If the","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC4bytes5UInt8VyF":{"name":"byte()","abstract":"<p>Reads a byte and returns it, advancing by one byte position.</p>","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC5bytes5countSays5UInt8VGSi_tF":{"name":"bytes(count:)","abstract":"<p>Reads <code>count</code> bytes and returns them as a <code>[UInt8]</code> array, advancing by <code>count</code> byte positions.</p>","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC6uint64s6UInt64VyF":{"name":"uint64()","abstract":"<p>Reads 8 bytes and returns them as a <code>UInt64</code> number, advancing by 8 byte positions.</p>","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC6uint649fromBytess6UInt64VSi_tF":{"name":"uint64(fromBytes:)","abstract":"<p>Reads <code>fromBytes</code> bytes and returns them as a <code>UInt64</code> number, advancing by <code>fromBytes</code> byte positions.</p>","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC6uint32s6UInt32VyF":{"name":"uint32()","abstract":"<p>Reads 4 bytes and returns them as a <code>UInt32</code> number, advancing by 4 byte positions.</p>","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC6uint329fromBytess6UInt32VSi_tF":{"name":"uint32(fromBytes:)","abstract":"<p>Reads <code>fromBytes</code> bytes and returns them as a <code>UInt32</code> number, advancing by <code>fromBytes</code> byte positions.</p>","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC6uint16s6UInt16VyF":{"name":"uint16()","abstract":"<p>Reads 2 bytes and returns them as a <code>UInt16</code> number, advancing by 2 byte positions.</p>","parent_name":"MsbBitReader"},"Classes/MsbBitReader.html#/s:11BitByteData03MsbA6ReaderC6uint169fromBytess6UInt16VSi_tF":{"name":"uint16(fromBytes:)","abstract":"<p>Reads <code>fromBytes</code> bytes and returns them as a <code>UInt16</code> number, advancing by <code>fromBytes</code> byte positions.</p>","parent_name":"MsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC4sizeSivp":{"name":"size","abstract":"<p>Size of the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC4data10Foundation0C0Vvp\">data</a></code> (in bytes).</p>","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC4data10Foundation0C0Vvp":{"name":"data","abstract":"<p>Data which is being read.</p>","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC6offsetSivp":{"name":"offset","abstract":"<p>Offset to a byte in the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC4data10Foundation0C0Vvp\">data</a></code> which will be read next.</p>","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC9isAlignedSbvp":{"name":"isAligned","abstract":"<p>True, if a bit pointer is aligned to a byte boundary.</p>","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC8bitsLeftSivp":{"name":"bitsLeft","abstract":"<p>Amount of bits left to read.</p>","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC8bitsReadSivp":{"name":"bitsRead","abstract":"<p>Amount of bits that were already read.</p>","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC4dataAC10Foundation0C0V_tcfc":{"name":"init(data:)","abstract":"<p>Creates an instance for reading bits (and bytes) from the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC4data10Foundation0C0Vvp\">data</a></code>.</p>","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderCyAcA0bE0_pcfc":{"name":"init(_:)","abstract":"<p>Converts a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/ByteReader.html\">ByteReader</a></code> instance into a <code>LsbBitReader</code>, enabling bit reading capabilities. The current <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC6offsetSivp\">offset</a></code>","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC7advance2byySi_tF":{"name":"advance(by:)","abstract":"<p>Advances a bit pointer by the specified amount of bits (the default value is 1).</p>","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC3bits5UInt8VyF":{"name":"bit()","abstract":"<p>Reads a bit and returns it, advancing by one bit position.</p>","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC4bits5countSays5UInt8VGSi_tF":{"name":"bits(count:)","abstract":"<p>Reads <code>count</code> bits and returns them as a <code>[UInt8]</code> array, advancing by <code>count</code> bit positions.</p>","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC9signedInt8fromBits14representationS2i_AA26SignedNumberRepresentationOtF":{"name":"signedInt(fromBits:representation:)","abstract":"<p>Reads <code>fromBits</code> bits, treating them as a binary <code>represenation</code> of a signed integer, and returns the result as a","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC4byte8fromBitss5UInt8VSi_tF":{"name":"byte(fromBits:)","abstract":"<p>Reads <code>fromBits</code> bits and returns them as a <code>UInt8</code> number, advancing by <code>fromBits</code> bit positions.</p>","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC6uint168fromBitss6UInt16VSi_tF":{"name":"uint16(fromBits:)","abstract":"<p>Reads <code>fromBits</code> bits and returns them as a <code>UInt16</code> number, advancing by <code>fromBits</code> bit positions.</p>","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC6uint328fromBitss6UInt32VSi_tF":{"name":"uint32(fromBits:)","abstract":"<p>Reads <code>fromBits</code> bits and returns them as a <code>UInt32</code> number, advancing by <code>fromBits</code> bit positions.</p>","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC6uint648fromBitss6UInt64VSi_tF":{"name":"uint64(fromBits:)","abstract":"<p>Reads <code>fromBits</code> bits and returns them as a <code>UInt64</code> number, advancing by <code>fromBits</code> bit positions.</p>","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC5alignyyF":{"name":"align()","abstract":"<p>Aligns a bit pointer to a byte boundary, i.e. moves the bit pointer to the first bit of the next byte. If the","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC4bytes5UInt8VyF":{"name":"byte()","abstract":"<p>Reads a byte and returns it, advancing by one byte position.</p>","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC5bytes5countSays5UInt8VGSi_tF":{"name":"bytes(count:)","abstract":"<p>Reads <code>count</code> bytes and returns them as a <code>[UInt8]</code> array, advancing by <code>count</code> byte positions.</p>","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC6uint64s6UInt64VyF":{"name":"uint64()","abstract":"<p>Reads 8 bytes and returns them as a <code>UInt64</code> number, advancing by 8 byte positions.</p>","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC6uint649fromBytess6UInt64VSi_tF":{"name":"uint64(fromBytes:)","abstract":"<p>Reads <code>fromBytes</code> bytes and returns them as a <code>UInt64</code> number, advancing by <code>fromBytes</code> byte positions.</p>","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC6uint32s6UInt32VyF":{"name":"uint32()","abstract":"<p>Reads 4 bytes and returns them as a <code>UInt32</code> number, advancing by 4 byte positions.</p>","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC6uint329fromBytess6UInt32VSi_tF":{"name":"uint32(fromBytes:)","abstract":"<p>Reads <code>fromBytes</code> bytes and returns them as a <code>UInt32</code> number, advancing by <code>fromBytes</code> byte positions.</p>","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC6uint16s6UInt16VyF":{"name":"uint16()","abstract":"<p>Reads 2 bytes and returns them as a <code>UInt16</code> number, advancing by 2 byte positions.</p>","parent_name":"LsbBitReader"},"Classes/LsbBitReader.html#/s:11BitByteData03LsbA6ReaderC6uint169fromBytess6UInt16VSi_tF":{"name":"uint16(fromBytes:)","abstract":"<p>Reads <code>fromBytes</code> bytes and returns them as a <code>UInt16</code> number, advancing by <code>fromBytes</code> byte positions.</p>","parent_name":"LsbBitReader"},"Protocols/BitReader.html#/s:11BitByteData0A6ReaderP9isAlignedSbvp":{"name":"isAligned","abstract":"<p>True, if a bit pointer is aligned to a byte boundary.</p>","parent_name":"BitReader"},"Protocols/BitReader.html#/s:11BitByteData0A6ReaderP8bitsLeftSivp":{"name":"bitsLeft","abstract":"<p>Amount of bits left to read.</p>","parent_name":"BitReader"},"Protocols/BitReader.html#/s:11BitByteData0A6ReaderP8bitsReadSivp":{"name":"bitsRead","abstract":"<p>Amount of bits that were already read.</p>","parent_name":"BitReader"},"Protocols/BitReader.html#/s:11BitByteData0A6ReaderPyxAA0bD0_pcfc":{"name":"init(_:)","abstract":"<p>Converts a <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/ByteReader.html\">ByteReader</a></code> instance into a <code>BitReader</code>, enabling bits reading capabilities. The current <code>offset</code> value","parent_name":"BitReader"},"Protocols/BitReader.html#/s:11BitByteData0A6ReaderP7advance2byySi_tF":{"name":"advance(by:)","abstract":"<p>Advances a bit pointer by the amount of bits.</p>","parent_name":"BitReader"},"Protocols/BitReader.html#/s:11BitByteData0A6ReaderP3bits5UInt8VyF":{"name":"bit()","abstract":"<p>Reads a bit and returns it, advancing by one bit position.</p>","parent_name":"BitReader"},"Protocols/BitReader.html#/s:11BitByteData0A6ReaderP4bits5countSays5UInt8VGSi_tF":{"name":"bits(count:)","abstract":"<p>Reads <code>count</code> bits and returns them as a <code>[UInt8]</code> array, advancing by <code>count</code> bit positions.</p>","parent_name":"BitReader"},"Protocols/BitReader.html#/s:11BitByteData0A6ReaderP3int8fromBitsS2i_tF":{"name":"int(fromBits:)","abstract":"<p>Reads <code>fromBits</code> bits and returns them as a <code>Int</code> number, advancing by <code>fromBits</code> bit positions.</p>","parent_name":"BitReader"},"Protocols/BitReader.html#/s:11BitByteData0A6ReaderP9signedInt8fromBits14representationS2i_AA26SignedNumberRepresentationOtF":{"name":"signedInt(fromBits:representation:)","abstract":"<p>Reads <code>fromBits</code> bits, treating them as a binary <code>represenation</code> of a signed integer, and returns the result as a","parent_name":"BitReader"},"Protocols/BitReader.html#/s:11BitByteData0A6ReaderP4byte8fromBitss5UInt8VSi_tF":{"name":"byte(fromBits:)","abstract":"<p>Reads <code>fromBits</code> bits and returns them as a <code>UInt8</code> number, advancing by <code>fromBits</code> bit positions.</p>","parent_name":"BitReader"},"Protocols/BitReader.html#/s:11BitByteData0A6ReaderP6uint168fromBitss6UInt16VSi_tF":{"name":"uint16(fromBits:)","abstract":"<p>Reads <code>fromBits</code> bits and returns them as a <code>UInt16</code> number, advancing by <code>fromBits</code> bit positions.</p>","parent_name":"BitReader"},"Protocols/BitReader.html#/s:11BitByteData0A6ReaderP6uint328fromBitss6UInt32VSi_tF":{"name":"uint32(fromBits:)","abstract":"<p>Reads <code>fromBits</code> bits and returns them as a <code>UInt32</code> number, advancing by <code>fromBits</code> bit positions.</p>","parent_name":"BitReader"},"Protocols/BitReader.html#/s:11BitByteData0A6ReaderP6uint648fromBitss6UInt64VSi_tF":{"name":"uint64(fromBits:)","abstract":"<p>Reads <code>fromBits</code> bits and returns them as a <code>UInt64</code> number, advancing by <code>fromBits</code> bit positions.</p>","parent_name":"BitReader"},"Protocols/BitReader.html#/s:11BitByteData0A6ReaderP5alignyyF":{"name":"align()","abstract":"<p>Aligns a bit pointer to a byte boundary, i.e. moves the bit pointer to the first bit of the next byte.</p>","parent_name":"BitReader"},"Protocols/BitReader.html":{"name":"BitReader","abstract":"<p>A type that contains functions for reading <code>Data</code> bit-by-bit and byte-by-byte.</p>"},"Classes/LsbBitReader.html":{"name":"LsbBitReader","abstract":"<p>A type that contains functions for reading <code>Data</code> bit-by-bit using &ldquo;LSB0&rdquo; bit numbering scheme and byte-by-byte in the"},"Classes/MsbBitReader.html":{"name":"MsbBitReader","abstract":"<p>A type that contains functions for reading <code>Data</code> bit-by-bit using &ldquo;MSB0&rdquo; bit numbering scheme and byte-by-byte in the"},"Classes/BigEndianByteReader.html#/s:11BitByteData09BigEndianB6ReaderC4sizeSivp":{"name":"size","abstract":"<p>Size of the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/BigEndianByteReader.html#/s:11BitByteData09BigEndianB6ReaderC4data10Foundation0C0Vvp\">data</a></code> (in bytes).</p>","parent_name":"BigEndianByteReader"},"Classes/BigEndianByteReader.html#/s:11BitByteData09BigEndianB6ReaderC4data10Foundation0C0Vvp":{"name":"data","abstract":"<p>Data which is being read.</p>","parent_name":"BigEndianByteReader"},"Classes/BigEndianByteReader.html#/s:11BitByteData09BigEndianB6ReaderC6offsetSivp":{"name":"offset","abstract":"<p>Offset to a byte in the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/BigEndianByteReader.html#/s:11BitByteData09BigEndianB6ReaderC4data10Foundation0C0Vvp\">data</a></code> which will be read next.</p>","parent_name":"BigEndianByteReader"},"Classes/BigEndianByteReader.html#/s:11BitByteData09BigEndianB6ReaderC4dataAC10Foundation0C0V_tcfc":{"name":"init(data:)","abstract":"<p>Creates an instance for reading bytes from the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/BigEndianByteReader.html#/s:11BitByteData09BigEndianB6ReaderC4data10Foundation0C0Vvp\">data</a></code>.</p>","parent_name":"BigEndianByteReader"},"Classes/BigEndianByteReader.html#/s:11BitByteData09BigEndianB6ReaderC4bytes5UInt8VyF":{"name":"byte()","abstract":"<p>Reads a byte and returns it, advancing by one position.</p>","parent_name":"BigEndianByteReader"},"Classes/BigEndianByteReader.html#/s:11BitByteData09BigEndianB6ReaderC5bytes5countSays5UInt8VGSi_tF":{"name":"bytes(count:)","abstract":"<p>Reads <code>count</code> bytes and returns them as a <code>[UInt8]</code> array, advancing by <code>count</code> positions.</p>","parent_name":"BigEndianByteReader"},"Classes/BigEndianByteReader.html#/s:11BitByteData09BigEndianB6ReaderC6uint64s6UInt64VyF":{"name":"uint64()","abstract":"<p>Reads 8 bytes and returns them as a <code>UInt64</code> number, advancing by 8 positions.</p>","parent_name":"BigEndianByteReader"},"Classes/BigEndianByteReader.html#/s:11BitByteData09BigEndianB6ReaderC6uint649fromBytess6UInt64VSi_tF":{"name":"uint64(fromBytes:)","abstract":"<p>Reads <code>fromBytes</code> bytes and returns them as a <code>UInt64</code> number, advancing by <code>fromBytes</code> positions.</p>","parent_name":"BigEndianByteReader"},"Classes/BigEndianByteReader.html#/s:11BitByteData09BigEndianB6ReaderC6uint32s6UInt32VyF":{"name":"uint32()","abstract":"<p>Reads 4 bytes and returns them as a <code>UInt32</code> number, advancing by 4 positions.</p>","parent_name":"BigEndianByteReader"},"Classes/BigEndianByteReader.html#/s:11BitByteData09BigEndianB6ReaderC6uint329fromBytess6UInt32VSi_tF":{"name":"uint32(fromBytes:)","abstract":"<p>Reads <code>fromBytes</code> bytes and returns them as a <code>UInt32</code> number, advancing by <code>fromBytes</code> positions.</p>","parent_name":"BigEndianByteReader"},"Classes/BigEndianByteReader.html#/s:11BitByteData09BigEndianB6ReaderC6uint16s6UInt16VyF":{"name":"uint16()","abstract":"<p>Reads 2 bytes and returns them as a <code>UInt16</code> number, advancing by 2 positions.</p>","parent_name":"BigEndianByteReader"},"Classes/BigEndianByteReader.html#/s:11BitByteData09BigEndianB6ReaderC6uint169fromBytess6UInt16VSi_tF":{"name":"uint16(fromBytes:)","abstract":"<p>Reads <code>fromBytes</code> bytes and returns them as a <code>UInt16</code> number, advancing by <code>fromBytes</code> positions.</p>","parent_name":"BigEndianByteReader"},"Classes/LittleEndianByteReader.html#/s:11BitByteData012LittleEndianB6ReaderC4sizeSivp":{"name":"size","abstract":"<p>Size of the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/LittleEndianByteReader.html#/s:11BitByteData012LittleEndianB6ReaderC4data10Foundation0C0Vvp\">data</a></code> (in bytes).</p>","parent_name":"LittleEndianByteReader"},"Classes/LittleEndianByteReader.html#/s:11BitByteData012LittleEndianB6ReaderC4data10Foundation0C0Vvp":{"name":"data","abstract":"<p>Data which is being read.</p>","parent_name":"LittleEndianByteReader"},"Classes/LittleEndianByteReader.html#/s:11BitByteData012LittleEndianB6ReaderC6offsetSivp":{"name":"offset","abstract":"<p>Offset to a byte in the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/LittleEndianByteReader.html#/s:11BitByteData012LittleEndianB6ReaderC4data10Foundation0C0Vvp\">data</a></code> which will be read next.</p>","parent_name":"LittleEndianByteReader"},"Classes/LittleEndianByteReader.html#/s:11BitByteData012LittleEndianB6ReaderC4dataAC10Foundation0C0V_tcfc":{"name":"init(data:)","abstract":"<p>Creates an instance for reading bytes from the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbClasses/LittleEndianByteReader.html#/s:11BitByteData012LittleEndianB6ReaderC4data10Foundation0C0Vvp\">data</a></code>.</p>","parent_name":"LittleEndianByteReader"},"Classes/LittleEndianByteReader.html#/s:11BitByteData012LittleEndianB6ReaderC4bytes5UInt8VyF":{"name":"byte()","abstract":"<p>Reads a byte and returns it, advancing by one position.</p>","parent_name":"LittleEndianByteReader"},"Classes/LittleEndianByteReader.html#/s:11BitByteData012LittleEndianB6ReaderC5bytes5countSays5UInt8VGSi_tF":{"name":"bytes(count:)","abstract":"<p>Reads <code>count</code> bytes and returns them as a <code>[UInt8]</code> array, advancing by <code>count</code> positions.</p>","parent_name":"LittleEndianByteReader"},"Classes/LittleEndianByteReader.html#/s:11BitByteData012LittleEndianB6ReaderC6uint64s6UInt64VyF":{"name":"uint64()","abstract":"<p>Reads 8 bytes and returns them as a <code>UInt64</code> number, advancing by 8 positions.</p>","parent_name":"LittleEndianByteReader"},"Classes/LittleEndianByteReader.html#/s:11BitByteData012LittleEndianB6ReaderC6uint649fromBytess6UInt64VSi_tF":{"name":"uint64(fromBytes:)","abstract":"<p>Reads <code>fromBytes</code> bytes and returns them as a <code>UInt64</code> number, advancing by <code>fromBytes</code> positions.</p>","parent_name":"LittleEndianByteReader"},"Classes/LittleEndianByteReader.html#/s:11BitByteData012LittleEndianB6ReaderC6uint32s6UInt32VyF":{"name":"uint32()","abstract":"<p>Reads 4 bytes and returns them as a <code>UInt32</code> number, advancing by 4 positions.</p>","parent_name":"LittleEndianByteReader"},"Classes/LittleEndianByteReader.html#/s:11BitByteData012LittleEndianB6ReaderC6uint329fromBytess6UInt32VSi_tF":{"name":"uint32(fromBytes:)","abstract":"<p>Reads <code>fromBytes</code> bytes and returns them as a <code>UInt32</code> number, advancing by <code>fromBytes</code> positions.</p>","parent_name":"LittleEndianByteReader"},"Classes/LittleEndianByteReader.html#/s:11BitByteData012LittleEndianB6ReaderC6uint16s6UInt16VyF":{"name":"uint16()","abstract":"<p>Reads 2 bytes and returns them as a <code>UInt16</code> number, advancing by 2 positions.</p>","parent_name":"LittleEndianByteReader"},"Classes/LittleEndianByteReader.html#/s:11BitByteData012LittleEndianB6ReaderC6uint169fromBytess6UInt16VSi_tF":{"name":"uint16(fromBytes:)","abstract":"<p>Reads <code>fromBytes</code> bytes and returns them as a <code>UInt16</code> number, advancing by <code>fromBytes</code> positions.</p>","parent_name":"LittleEndianByteReader"},"Protocols/ByteReader.html#/s:11BitByteData0B6ReaderP4sizeSivp":{"name":"size","abstract":"<p>Size of the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/ByteReader.html#/s:11BitByteData0B6ReaderP4data10Foundation0C0Vvp\">data</a></code> (in bytes).</p>","parent_name":"ByteReader"},"Protocols/ByteReader.html#/s:11BitByteData0B6ReaderP4data10Foundation0C0Vvp":{"name":"data","abstract":"<p>Data which is being read.</p>","parent_name":"ByteReader"},"Protocols/ByteReader.html#/s:11BitByteData0B6ReaderP6offsetSivp":{"name":"offset","abstract":"<p>Offset to a byte in the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/ByteReader.html#/s:11BitByteData0B6ReaderP4data10Foundation0C0Vvp\">data</a></code> which will be read next.</p>","parent_name":"ByteReader"},"Protocols/ByteReader.html#/s:11BitByteData0B6ReaderP4datax10Foundation0C0V_tcfc":{"name":"init(data:)","abstract":"<p>Creates an instance for reading bytes from the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/ByteReader.html#/s:11BitByteData0B6ReaderP4data10Foundation0C0Vvp\">data</a></code>.</p>","parent_name":"ByteReader"},"Protocols/ByteReader.html#/s:11BitByteData0B6ReaderP4bytes5UInt8VyF":{"name":"byte()","abstract":"<p>Reads a byte and returns it, advancing by one position.</p>","parent_name":"ByteReader"},"Protocols/ByteReader.html#/s:11BitByteData0B6ReaderP5bytes5countSays5UInt8VGSi_tF":{"name":"bytes(count:)","abstract":"<p>Reads <code>count</code> bytes and returns them as a <code>[UInt8]</code> array, advancing by <code>count</code> positions.</p>","parent_name":"ByteReader"},"Protocols/ByteReader.html#/s:11BitByteData0B6ReaderP3int9fromBytesS2i_tF":{"name":"int(fromBytes:)","abstract":"<p>Reads <code>fromBytes</code> bytes and returns them as a <code>Int</code> number, advancing by <code>fromBytes</code> positions.</p>","parent_name":"ByteReader"},"Protocols/ByteReader.html#/s:11BitByteData0B6ReaderP6uint649fromBytess6UInt64VSi_tF":{"name":"uint64(fromBytes:)","abstract":"<p>Reads <code>fromBytes</code> bytes and returns them as a <code>UInt64</code> number, advancing by <code>fromBytes</code> positions.</p>","parent_name":"ByteReader"},"Protocols/ByteReader.html#/s:11BitByteData0B6ReaderP6uint329fromBytess6UInt32VSi_tF":{"name":"uint32(fromBytes:)","abstract":"<p>Reads <code>fromBytes</code> bytes and returns them as a <code>UInt32</code> number, advancing by <code>fromBytes</code> positions.</p>","parent_name":"ByteReader"},"Protocols/ByteReader.html#/s:11BitByteData0B6ReaderP6uint169fromBytess6UInt16VSi_tF":{"name":"uint16(fromBytes:)","abstract":"<p>Reads <code>fromBytes</code> bytes and returns them as a <code>UInt16</code> number, advancing by <code>fromBytes</code> positions.</p>","parent_name":"ByteReader"},"Protocols/ByteReader.html#/s:11BitByteData0B6ReaderPAAEyxAA0aD0_pcfc":{"name":"init(_:)","abstract":"<p>Creates an instance for reading bytes by using the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/ByteReader.html#/s:11BitByteData0B6ReaderP4data10Foundation0C0Vvp\">data</a></code> and the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/ByteReader.html#/s:11BitByteData0B6ReaderP6offsetSivp\">offset</a></code> of the specified <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/BitReader.html\">BitReader</a></code>.</p>","parent_name":"ByteReader"},"Protocols/ByteReader.html#/s:11BitByteData0B6ReaderPAAE9bytesLeftSivp":{"name":"bytesLeft","abstract":"<p>Amount of bytes left to read.</p>","parent_name":"ByteReader"},"Protocols/ByteReader.html#/s:11BitByteData0B6ReaderPAAE9bytesReadSivp":{"name":"bytesRead","abstract":"<p>Amount of bytes that were already read.</p>","parent_name":"ByteReader"},"Protocols/ByteReader.html#/s:11BitByteData0B6ReaderPAAE10isFinishedSbvp":{"name":"isFinished","abstract":"<p>True, if the <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/ByteReader.html#/s:11BitByteData0B6ReaderP6offsetSivp\">offset</a></code> points at any position after the last byte in <code><a href=\"36f8f5912051ae747ef441d6511ca4cbProtocols/ByteReader.html#/s:11BitByteData0B6ReaderP4data10Foundation0C0Vvp\">data</a></code>, which generally means that all data","parent_name":"ByteReader"},"Protocols/ByteReader.html":{"name":"ByteReader","abstract":"<p>A type that contains functions for reading <code>Data</code> byte-by-byte.</p>"},"Classes/LittleEndianByteReader.html":{"name":"LittleEndianByteReader","abstract":"<p>A type that contains functions for reading <code>Data</code> byte-by-byte in the Little Endian order.</p>"},"Classes/BigEndianByteReader.html":{"name":"BigEndianByteReader","abstract":"<p>A type that contains functions for reading <code>Data</code> byte-by-byte in the Big Endian order.</p>"},"Reading%20bytes.html":{"name":"Reading bytes"},"Reading%20bits%20%28and%20bytes%29.html":{"name":"Reading bits (and bytes)"},"Writing%20bits%20%28and%20bytes%29.html":{"name":"Writing bits (and bytes)"},"Other%20Enums.html":{"name":"Other Enumerations","abstract":"<p>The following enumerations are available globally.</p>"}}