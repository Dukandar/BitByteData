trigger:
  branches:
    exclude:
    - master
  tags:
    include:
    - '*'
    exclude:
    - '*-test*'

stages:
- stage: test
  displayName: 'Build & Test'
  jobs:
  - job: macos
    # TODO: Add Xcode 12.5/Swift 5.4. It requires macOS 11 which is currently unavailable on AZP. For Xcode 12.5 we can also enable testing on watchos.
    strategy:
      matrix:
        macosSwift50:
          imageName: 'macOS-10.14'
          DEVELOPER_DIR: '/Applications/Xcode_10.3.app'
          WATCHOS_ACTIONS: 'clean build'
          WATCHOS_SIMULATOR: 'Apple Watch Series 4 - 44mm'
        macosSwift51:
          imageName: 'macOS-10.15'
          DEVELOPER_DIR: '/Applications/Xcode_11.3.1.app'
          WATCHOS_ACTIONS: 'clean build'
          WATCHOS_SIMULATOR: 'Apple Watch Series 4 - 44mm'
        macosSwift52:
          imageName: 'macOS-10.15'
          DEVELOPER_DIR: '/Applications/Xcode_11.4.1.app'
          WATCHOS_ACTIONS: 'clean build'
          WATCHOS_SIMULATOR: 'Apple Watch Series 4 - 44mm'
        macosSwift53:
          imageName: 'macOS-10.15'
          DEVELOPER_DIR: '/Applications/Xcode_12.4.app'
          WATCHOS_ACTIONS: 'clean build'
          WATCHOS_SIMULATOR: 'Apple Watch Series 4 - 44mm'
        # macosSwift54:
        #   imageName: 'macOS-11.3'
        #   DEVELOPER_DIR: '/Applications/Xcode_12.5.app'
        #   WATCHOS_ACTIONS: 'clean test'
        #   WATCHOS_SIMULATOR: 'Apple Watch Series 6 - 44mm'
    pool:
      vmImage: $(imageName)
    steps:
    - script: |
        set -e -o xtrace
        swift --version
        swift build
        swift test --filter BitByteDataTests
      displayName: 'Build & Test'
    - script: |
        set -e -o xtrace
        swift --version
        swift build -c release # Check Release build just in case.
      displayName: 'Build Release'
    - script: |
        set -e -o xtrace
        xcodebuild -version
        xcodebuild -quiet -project BitByteData.xcodeproj -scheme BitByteData -destination "platform=OS X" clean test
        xcodebuild -quiet -project BitByteData.xcodeproj -scheme BitByteData -destination "platform=iOS Simulator,name=iPhone 8" clean test
        xcodebuild -quiet -project BitByteData.xcodeproj -scheme BitByteData -destination "platform=watchOS Simulator,name=$WATCHOS_SIMULATOR" $WATCHOS_ACTIONS
        xcodebuild -quiet -project BitByteData.xcodeproj -scheme BitByteData -destination "platform=tvOS Simulator,name=Apple TV" clean test
      displayName: 'Build & Test Darwin Platforms'
  - job: linux
    strategy:
      matrix:
        linuxSwift50:
          imageName: 'ubuntu-18.04'
          containerImage: 'swift:5.0.3-bionic'
        linuxSwift51:
          imageName: 'ubuntu-18.04'
          containerImage: 'swift:5.1.5-bionic'
        linuxSwift52:
          imageName: 'ubuntu-18.04'
          containerImage: 'swift:5.2.5-bionic'
        linuxSwift53:
          imageName: 'ubuntu-18.04'
          containerImage: 'swift:5.3.3-bionic'
        linuxSwift54:
          imageName: 'ubuntu-18.04'
          containerImage: 'swift:5.4.1-bionic'
    pool:
      vmImage: $(imageName)
    container: $[ variables['containerImage'] ]
    steps:
    - script: |
        set -e -o xtrace
        swift --version
        swift build
        swift test --filter BitByteDataTests
      displayName: 'Build & Test'
    - script: |
        set -e -o xtrace
        swift --version
        swift build -c release # Check Release build just in case.
      displayName: 'Build Release'
#   - job: windows
#     strategy:
#       matrix:
#         windowsSwift54:
#           imageName: 'windows-2019'
#           # SWIFT_VERSION: '5.4.1'
#     pool:
#       vmImage: $(imageName)
#     steps:
#     - pwsh: |
#         Invoke-WebRequest -Uri https://swift.org/builds/swift-5.4.1-release/windows10/swift-5.4.1-RELEASE/swift-5.4.1-RELEASE-windows10.exe -OutFile swift-install.exe
#         Start-Process -FilePath '.\swift-install.exe' -Wait
#       displayName: 'Install Swift'
#     - script: |
#         swift --version
#         swift build
#         swift test --filter BitByteDataTests
#       displayName: 'Build & Test'
#     - script: |
#         swift --version
#         swift build -c release
#       displayName: 'Build Release'
# - stage: Deploy
#   dependsOn: Test
#   condition: startsWith(variables['Build.SourceBranch'], 'refs/tags') # Deploy on tags only
